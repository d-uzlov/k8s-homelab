---
- name: Install k8s dependencies
  hosts: kubelet
  become: true

  vars:
    kubelet_version: v1.34.1

  tasks:

  - name: stat /var/lib/kubelet/kubeconfig.yaml
    ansible.builtin.stat:
      path: /var/lib/kubelet/kubeconfig.yaml
    register: kubelet_kubeconfig_stat

  - name: create kubelet bootstrap CSR
    delegate_to: localhost
    become: false
    ansible.builtin.template:
      src: ./csr/kubelet-template.json
      dest: "./env/cluster-{{ k8s_cluster_name }}/pki/kubelet-{{ k8s_node_name }}-bootstrap.json"
    register: csr

  - name: create kubelet bootstrap cert
    delegate_to: localhost
    become: false
    ansible.builtin.shell: |
      set -e
      set -o pipefail
      cfssl gencert \
        -ca "./env/cluster-{{ k8s_cluster_name }}/ca/ca.pem" \
        -ca-key "./env/cluster-{{ k8s_cluster_name }}/ca/ca-key.pem" \
        -config "./csr/ca-config.json" \
        -profile kubelet-bootstrap \
        "./env/cluster-{{ k8s_cluster_name }}/pki/kubelet-{{ k8s_node_name }}-bootstrap.json" \
        | cfssljson -bare "./env/cluster-{{ k8s_cluster_name }}/pki/kubelet-{{ k8s_node_name }}-bootstrap"
    register: cfssl_run
    when: csr.changed or not kubelet_kubeconfig_stat.stat.exists

  - name: delete /var/lib/kubelet/pki/ (when need to recreate certs)
    ansible.builtin.file:
      path: /var/lib/kubelet/pki/
      state: absent
    when: csr.changed

  - name: create /var/lib/kubelet/pki/
    ansible.builtin.file:
      path: /var/lib/kubelet/pki/
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: copy ca
    ansible.builtin.copy:
      src: ./env/cluster-{{ k8s_cluster_name }}/ca/ca.pem
      dest: /var/lib/kubelet/pki/ca.pem
      owner: root
      group: root
      mode: "0644"
    register: copy_ca

  - name: copy kubelet bootstrap cert
    ansible.builtin.copy:
      src: ./env/cluster-{{ k8s_cluster_name }}/pki/{{ item.source }}
      dest: /var/lib/kubelet/pki/{{ item.dest }}
      owner: root
      group: root
      mode: preserve
    when: csr.changed or not kubelet_kubeconfig_stat.stat.exists
    loop:
    - { source: "kubelet-{{ k8s_node_name }}-bootstrap.pem", dest: "kubelet-client-bootstrap.pem" }
    - { source: "kubelet-{{ k8s_node_name }}-bootstrap-key.pem", dest: "kubelet-client-bootstrap-key.pem" }

  - name: copy bootstrap-kubeconfig.yaml
    ansible.builtin.template:
      src: ./kubelet-bootstrap-kubeconfig.yaml
      dest: /var/lib/kubelet/bootstrap-kubeconfig.yaml
      mode: "0644"
    when: csr.changed or not kubelet_kubeconfig_stat.stat.exists
    notify:
    - kubelet_service_restart

  - name: copy kubelet config
    ansible.builtin.template:
      src: ./kubelet-config.yaml
      dest: /var/lib/kubelet/config.yaml
      owner: root
      group: root
      mode: "0644"
    notify:
    - kubelet_service_restart

  - name: copy kubelet binary
    ansible.builtin.copy:
      src: ./env/kubelet-{{ kubelet_version }}.amd64
      dest: /usr/local/bin/kubelet
      owner: root
      group: root
      mode: "0755"
    notify:
    - kubelet_service_restart

  - name: copy kubelet.service
    ansible.builtin.template:
      src: ./kubelet.service
      dest: /etc/systemd/system/kubelet.service
      owner: root
      group: root
      mode: "0644"
    notify:
    - systemd_daemon_reload
    - kubelet_service_restart

  - name: create kubelet.service.d
    ansible.builtin.file:
      path: /etc/systemd/system/kubelet.service.d/
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: delete kubelet-kubeadm config
    ansible.builtin.file:
      dest: /etc/systemd/system/kubelet.service.d/kubelet-kubeadm.conf
      state: absent
    notify:
    - systemd_daemon_reload
    - kubelet_service_restart

  - name: create /etc/kubernetes/manifests
    ansible.builtin.file:
      path: /etc/kubernetes/manifests
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: delete kubeadm
    ansible.builtin.file:
      dest: /usr/local/bin/kubeadm
      state: absent

  handlers:
  - name: systemd_daemon_reload
    ansible.builtin.systemd_service:
      daemon_reload: true
  - name: restart kubelet.service
    listen:
    - kubelet_service_restart
    ansible.builtin.systemd_service:
      name: kubelet.service
      enabled: true
      state: restarted
      daemon_reload: false
