---
apiVersion: v1
kind: Service
metadata:
  name: prom-prompp
  labels:
    app: prompp
    instance: prompp
spec:
  selector:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: prompp
  ports:
  - name: http-web
    port: 9090
    targetPort: 9090
  - name: reloader-web
    appProtocol: http
    port: 8080
    targetPort: reloader-web
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: prompp
  labels:
    app: prompp
spec:
  serviceName: prom-prompp
  version: v2.53.2
  paused: false
  replicas: 1
  # shards: 1
  resources:
    requests:
      # prompp uses ~700m just for scrapes and rule evaluation
      cpu: 700m
      # in my deployment prometheus doesn't need too much RSS
      # but it needs a lot of memory for cache, and it runs very poorly when cache is not available
      memory: 2Gi
    limits:
      memory: 8Gi
  # when created-timestamp-zero-ingestion is enabled,
  # debug logs create infinite amount of "Error when appending CT in scrape loop" messages
  logLevel: info
  logFormat: logfmt
  enableAdminAPI: true
  scrapeInterval: 10s
  evaluationInterval: 10s
  retention: 1y
  enableFeatures:
  - extra-scrape-metrics
  - created-timestamp-zero-ingestion
  # tsdb:
    # outOfOrderTimeWindow: 0s
  # routePrefix: "/"
  securityContext:
    fsGroup: 64535
    runAsGroup: 64535
    runAsNonRoot: true
    runAsUser: 64535
  # service account, configured in rbac.yaml,
  # is required for service discovery to work
  serviceAccountName: prometheus
  serviceMonitorSelector:
    matchLabels:
      instance.prometheus.io/prompp: enable
  serviceMonitorNamespaceSelector: {}
  podMonitorSelector:
    matchLabels:
      instance.prometheus.io/prompp: enable
  podMonitorNamespaceSelector: {}
  probeSelector:
    matchLabels:
      instance.prometheus.io/prompp: enable
  probeNamespaceSelector: {}
  ruleSelector:
    matchLabels:
      instance.prometheus.io/prompp: enable
  ruleNamespaceSelector: {}
  scrapeConfigSelector:
    matchLabels:
      instance.prometheus.io/prompp: enable
  scrapeConfigNamespaceSelector: {}
  additionalAlertRelabelConfigs:
    name: prometheus-prompp-extra-configs
    key: alert-relabel.yaml
  # affinity:
  #   podAntiAffinity:
  #     preferredDuringSchedulingIgnoredDuringExecution:
  #     - weight: 100
  #       podAffinityTerm:
  #         topologyKey: kubernetes.io/hostname
  #         labelSelector:
  #           matchExpressions:
  #           # prometheus operator creates pods with app.kubernetes.io/name label
  #           - {key: app.kubernetes.io/name, operator: In, values: [prompp]}
  # portName: http-web
  # volumes:
  # - emptyDir: {}
  #   name: tmp
  # volumeMounts:
  # - mountPath: /tmp
  #   name: tmp
  # hostNetwork: false
  # containers:
  # - name: prometheus
  #   livenessProbe:
  #     failureThreshold: 10
  image: docker.io/prompp/prompp:2.53.2-0.4.0
  imagePullPolicy: Always
  # initContainers:
  # - name: prompptool
  #   image: prompp/prompp:2.53.2-0.2.1
  #   imagePullPolicy: Always
  #   command:
  #     - /bin/prompptool
  #     - --working-dir=/prometheus
  #     - walvanilla
  #   volumeMounts:
  #   - name: db
  #     mountPath: /prometheus
  #     subPath: prometheus-db
  #   resources:
  #     requests:
  #       cpu: "100m"
  #       memory: "128Mi"
